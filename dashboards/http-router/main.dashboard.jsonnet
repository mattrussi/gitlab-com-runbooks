// This file is autogenerated using scripts/generate-service-dashboards
// Please feel free to customize this file.
local serviceDashboard = import 'gitlab-dashboards/service_dashboard.libsonnet';
local grafonnet = import 'grafonnet-latest/main.libsonnet';

local timeSeries = grafonnet.panel.timeSeries;
local row = grafonnet.panel.row;
local query = grafonnet.query;

serviceDashboard.overview('http-router')
.addPanels(
  grafonnet.util.grid.makeGrid(
    panels=[
      row.new('ðŸš€ Performance monitoring') +
      // row.withCollapsed(true) +
      row.withPanels([
        timeSeries.new('CloudFlare Worker CPU duration (quantiles)') +
        timeSeries.panelOptions.withDescription(|||
          The reported CPU time quantile summary for CloudFlare worker scripts
        |||) +
        timeSeries.queryOptions.withTargets(
          query.prometheus.new(
            '$PROMETHEUS_DS',
            |||
              max by (quantile)(cloudflare_worker_cpu_time{type="http-router", env="$environment"})
            |||,
          ) +
          query.prometheus.withLegendFormat('{{ quantile }}')
        ) +
        timeSeries.standardOptions.withUnit('Âµs'),

        timeSeries.new('BlackBox Observed Response Time (by phase)') +
        timeSeries.panelOptions.withDescription(|||
          The End User Response Time as observed by BlackBox exporter.

          We scrape blackbox exporter from the `gstg` and `gprd` tenants.
          To see any data in these panels you need to set the datasource on the dashboard accordingly.
        |||) +
        timeSeries.queryOptions.withTargets(
          query.prometheus.new(
            '$PROMETHEUS_DS',
            |||
              max by (instance, phase) (probe_http_duration_seconds{instance=~"^https://(staging\\.)?gitlab\\.com(/.*)?$", type="blackbox", env="$environment"})
            |||,
          ) +
          query.prometheus.withLegendFormat('{{ instance }} - {{ phase }}')
        ) +
        timeSeries.standardOptions.withUnit('s'),

        timeSeries.new('BlackBox Observed Response Time (before data transfer)') +
        timeSeries.panelOptions.withDescription(|||
          The End User Response Time as observed by BlackBox exporter up until the point of receiving data from the edge.

          We scrape blackbox exporter from the `gstg` and `gprd` tenants.
          To see any data in these panels you need to set the datasource on the dashboard accordingly.
        |||) +
        timeSeries.queryOptions.withTargets(
          query.prometheus.new(
            '$PROMETHEUS_DS',
            |||
              max by (instance) (sum by (instance, phase)(probe_http_duration_seconds{phase!="transfer", instance=~"^https://(staging\\.)?gitlab\\.com(/.*)?$", type="blackbox", env="$environment"}))
            |||,
          ) +
          query.prometheus.withLegendFormat('{{ instance }}')
        ) +
        timeSeries.standardOptions.withUnit('s'),


        timeSeries.new('Pingdom Observed Response Time') +
        timeSeries.panelOptions.withDescription(|||
          The End User Response Time as observed by Pingdom.

          We currently do not have a threshold defined for pingdom metrics so using the request urgency thresholds to provide scaling: https://docs.gitlab.com/ee/development/application_slis/rails_request.html#how-to-adjust-the-urgency",
        |||) +
        timeSeries.queryOptions.withTargets(
          query.prometheus.new(
            '$PROMETHEUS_DS',
            |||
              pingdom_uptime_response_time_seconds{hostname=~"(staging\\.)?gitlab\\.com"}
            |||,
          ) +
          query.prometheus.withLegendFormat('{{ name }}')
        ) +
        timeSeries.standardOptions.withUnit('s'),
      ]),
    ],
    startY=100,
  ),
)
.overviewTrailer()
