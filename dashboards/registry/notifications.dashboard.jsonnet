local grafana = import 'github.com/grafana/grafonnet-lib/grafonnet/grafana.libsonnet';
local template = grafana.template;
local templates = import 'grafana/templates.libsonnet';
local row = grafana.row;
local basic = import 'grafana/basic.libsonnet';
local layout = import 'grafana/layout.libsonnet';
local graphPanel = grafana.graphPanel;
local promQuery = import 'grafana/prom_query.libsonnet';
local statPanel = grafana.statPanel;
local colorScheme = import 'grafana/color_scheme.libsonnet';
local panel = import 'grafana/time-series/panel.libsonnet';
local target = import 'grafana/time-series/target.libsonnet';

local useTimeSeriesPlugin = true;

basic.dashboard(
  'Webhook Notifications Detail',
  tags=['container registry', 'docker', 'registry', 'webhook', 'notifications'],
)
.addTemplate(templates.gkeCluster)
.addTemplate(templates.stage)
.addTemplate(templates.namespaceGitlab)
.addTemplate(
  template.custom(
    'Deployment',
    'gitlab-registry,',
    'gitlab-registry',
    hide='variable',
  )
)
.addTemplate(
  template.new(
    'cluster',
    '$PROMETHEUS_DS',
    'label_values(registry_notifications_events_total{environment="$environment"}, cluster)',
    current=null,
    refresh='load',
    sort=true,
    multi=true,
    includeAll=true,
    allValues='.*',
  )
)
.addPanel(
  row.new(title='Overview'),
  gridPos={
    x: 0,
    y: 0,
    w: 24,
    h: 1,
  }
)
.addPanels(
  layout.grid([
    statPanel.new(
      title='Events per second',
      description='The per-second rate of all event notifications sent by the registry.',
      reducerFunction='last',
      decimals=0,
      graphMode='none',
    )
    .addTarget(
      promQuery.target(
        |||
          sum (
            rate(
              registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
            )
          )
        |||
      )
    ),
    statPanel.new(
      title='Events queued',
      description='The total number of events generated by the registry per interval.',
      reducerFunction='last',
      decimals=0,
      graphMode='none',
    )
    .addTarget(
      promQuery.target(
        |||
          sum(
            increase(
              registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
            )
          )
        |||
      )
    ),
    statPanel.new(
      title='Events delivered',
      description='The total number of events sent by the registry per interval.',
      reducerFunction='last',
      decimals=0,
      graphMode='none',
    )
    .addTarget(
      promQuery.target(
        |||
          sum(
            increase(
              registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Successes"}[$__interval]
            )
          )
        |||
      )
    ),
    statPanel.new(
      title='Pending events',
      description='The number of pending events that need to be sent.',
      reducerFunction='last',
      decimals=0,
      graphMode='none',
    )
    .addTarget(
      promQuery.target(
        |||
          sum(
            max_over_time(
              registry_notifications_pending_total{environment="$environment", cluster=~"$cluster", stage="$stage"}[$__interval]
            )
          )
        |||
      )
    ),
    statPanel.new(
      title='Event delivery success rate',
      reducerFunction='last',
      decimals=2,
      unit='percentunit',
      graphMode='none',
    )
    .addTarget(
      promQuery.target(
        |||
          sum(
            rate(
              registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Successes"}[$__interval]
            )
          )
          /
          sum(
            rate(
              registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
            )
          )
        |||
      )
    )
    .addThresholds(
      [
        { color: colorScheme.errorColor, value: 0.30 },
        { color: colorScheme.warningColor, value: 0.50 },
        { color: colorScheme.normalRangeColor, value: 0.80 },
      ]
    ),
  ], cols=4, rowHeight=4, startRow=1)
)
.addPanel(
  row.new(title='Details'),
  gridPos={
    x: 0,
    y: 1000,
    w: 24,
    h: 1,
  }
)
.addPanels(
  layout.grid(
    if useTimeSeriesPlugin then
      [
        panel.timeSeries(
          title='Events queued per second',
          description='The per-second rate of all events generated by the registry.',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        panel.timeSeries(
          title='Event delivery failure rate',
          description='The per-second rate of events that failed to be delivered due to response status code >= 400',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Failures"}[$__interval]
              )
            )
            /
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        panel.timeSeries(
          title='Event delivery error rate',
          description='The per-second rate of events that were not sent due to registry internal errors or timeouts',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Errors"}[$__interval]
              )
            )
            /
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        panel.basic(
          'Pending events',
          description='The number of events pending to be sent.',
          linewidth=1,
          legend_show=false,
        )
        .addTarget(
          target.prometheus(
            |||
              sum(
                max_over_time(
                  registry_notifications_pending_total{environment="$environment", cluster=~"$cluster", stage="$stage"}[$__interval]
                )
              )
            |||,
            legendFormat='{{ command }}',
          )
        ),
        panel.basic(
          'Events per second (by Status Code)',
          description='The per-second rate of response status codes for all events.',
          unit='ops',
          linewidth=1,
          legend_show=false,
        )
        .addTarget(
          target.prometheus(
            |||
              sum by (code) (
                rate(
                  registry_notifications_status_total{environment="$environment", cluster=~"$cluster", stage="$stage"}[$__interval]
                )
              )
            |||,
          )
        ),
      ]
    else
      [
        basic.timeseries(
          title='Events queued per second',
          description='The per-second rate of all events generated by the registry.',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        basic.timeseries(
          title='Event delivery failure rate',
          description='The per-second rate of events that failed to be delivered due to response status code >= 400',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Failures"}[$__interval]
              )
            )
            /
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        basic.timeseries(
          title='Event delivery error rate',
          description='The per-second rate of events that were not sent due to registry internal errors or timeouts',
          query=|||
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Errors"}[$__interval]
              )
            )
            /
            sum(
              rate(
                registry_notifications_events_total{environment="$environment", cluster=~"$cluster", stage="$stage", exported_type="Events"}[$__interval]
              )
            )
          |||,
          legend_show=false,
          format='ops'
        ),
        graphPanel.new(
          'Pending events',
          description='The number of events pending to be sent.',
          linewidth=1,
          fill=0,
          legend_alignAsTable=true,
          legend_values=true,
          legend_min=true,
          legend_max=true,
          legend_current=true,
          legend_sort='current',
          legend_sortDesc=true,
        )
        .addTarget(
          promQuery.target(
            |||
              sum(
                max_over_time(
                  registry_notifications_pending_total{environment="$environment", cluster=~"$cluster", stage="$stage"}[$__interval]
                )
              )
            |||,
            legendFormat='{{ command }}',
          )
        ),
        graphPanel.new(
          'Events per second (by Status Code)',
          description='The per-second rate of response status codes for all events.',
          format='ops',
          linewidth=1,
          fill=0,
          legend_alignAsTable=true,
          legend_values=true,
          legend_min=true,
          legend_max=true,
          legend_current=true,
          legend_sort='current',
          legend_sortDesc=true,
        )
        .addTarget(
          promQuery.target(
            |||
              sum by (code) (
                rate(
                  registry_notifications_status_total{environment="$environment", cluster=~"$cluster", stage="$stage"}[$__interval]
                )
              )
            |||,
          )
        ),
      ], cols=3, rowHeight=13, startRow=1001
  ),
)
