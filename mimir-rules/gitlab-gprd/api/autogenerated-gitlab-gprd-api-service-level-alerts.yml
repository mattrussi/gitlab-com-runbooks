# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ./mimir-rules-jsonnet/service-component-alerts.jsonnet TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN
groups:
- name: 'Service Component Alerts: api'
  interval: 1m
  rules:
  - alert: ApiServiceGlobalSearchApdexSLOViolation
    for: 2m
    annotations:
      title: The global_search SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4181740019"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_1h{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_5m{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="global_search",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlobalSearchApdexSLOViolation
    for: 2m
    annotations:
      title: The global_search SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4181740019"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_6h{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_30m{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="global_search",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlobalSearchApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The global_search SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4181740019"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_1h{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_5m{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="global_search",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlobalSearchApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The global_search SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4181740019"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_6h{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_30m{component="global_search",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="global_search",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlobalSearchTrafficCessation
    for: 5m
    annotations:
      title: The global_search SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3070581511"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_global_search_apdex_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGlobalSearchTrafficAbsent
    for: 30m
    annotations:
      title: The global_search SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3070581511"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_global_search_apdex_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="global_search",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGlobalSearchTrafficCessationRegional
    for: 5m
    annotations:
      title: The global_search SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3070581511"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_global_search_apdex_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGlobalSearchTrafficAbsentRegional
    for: 30m
    annotations:
      title: The global_search SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        The number of Global Search search requests meeting their duration target based on the 99.95th percentile of the search with the same parameters.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3070581511"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_global_search_apdex_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: global_search
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="global_search",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="global_search",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGlqlApdexSLOViolation
    for: 2m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has an
        apdex violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "400125773"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:confidence:ratio_1h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:confidence:ratio_5m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="glql",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlqlApdexSLOViolation
    for: 2m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has an
        apdex violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "400125773"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:confidence:ratio_6h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:confidence:ratio_30m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="glql",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlqlApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        an apdex violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "400125773"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:confidence:ratio_1h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:confidence:ratio_5m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="glql",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlqlApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        an apdex violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "400125773"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:confidence:ratio_6h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:confidence:ratio_30m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="glql",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlqlErrorSLOViolation
    for: 2m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has an
        error rate violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3121910075"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_glql_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_1h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_5m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="glql",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlqlErrorSLOViolation
    for: 2m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has an
        error rate violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3121910075"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_glql_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_6h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_30m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="glql",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlqlErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        an error rate violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3121910075"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_glql_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_1h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_5m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="glql",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGlqlErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        an error rate violating SLO
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3121910075"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_glql_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_6h{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_30m{component="glql",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="glql",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGlqlTrafficCessation
    for: 5m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has not
        received any traffic in the past 30m
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2440456635"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_glql_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="glql",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="glql",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGlqlTrafficAbsent
    for: 30m
    annotations:
      title: The glql SLI of the api service (`{{ $labels.stage }}` stage) has not
        reported any traffic in the past 30m
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2440456635"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_glql_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="glql",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="glql",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGlqlTrafficCessationRegional
    for: 5m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        not received any traffic in the past 30m
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2440456635"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_glql_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="glql",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="glql",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGlqlTrafficAbsentRegional
    for: 30m
    annotations:
      title: The glql SLI of the api service in region `{{ $labels.region }}` has
        not reported any traffic in the past 30m
      description: |
        A GLQL query runs as part of a GraphQL request. Not every error results in a 5xx; sometimes errors are simply returned in the response. Although multiple queries can be batched in one request, GLQL sends one query per request and queues them.

        The number of GLQL queries meeting their duration target based on the urgency of the endpoint (which currently is setup as low). By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Invalid GLQL queries (for example, due to syntax errors) do not count towards the error budget. We specifically monitor QueryAborted errors because they indicate timeouts; if a query times out, our rate limiter throttles it.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2440456635"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_glql_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: markdown
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="glql",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="glql",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGraphqlQueryApdexSLOViolation
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3837080777"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:confidence:ratio_1h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:confidence:ratio_5m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGraphqlQueryApdexSLOViolation
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3837080777"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:confidence:ratio_6h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:confidence:ratio_30m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGraphqlQueryApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3837080777"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:confidence:ratio_1h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:confidence:ratio_5m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGraphqlQueryApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3837080777"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:confidence:ratio_6h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:confidence:ratio_30m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGraphqlQueryErrorSLOViolation
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1966600567"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_graphql_query_error_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_1h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_5m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGraphqlQueryErrorSLOViolation
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1966600567"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_graphql_query_error_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_6h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_30m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGraphqlQueryErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1966600567"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_graphql_query_error_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_1h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_5m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGraphqlQueryErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1966600567"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_graphql_query_error_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_6h{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_30m{component="graphql_query",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="graphql_query",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGraphqlQueryTrafficCessation
    for: 5m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1872300215"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_graphql_query_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGraphqlQueryTrafficAbsent
    for: 30m
    annotations:
      title: The graphql_query SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1872300215"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_graphql_query_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGraphqlQueryTrafficCessationRegional
    for: 5m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1872300215"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_graphql_query_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGraphqlQueryTrafficAbsentRegional
    for: 30m
    annotations:
      title: The graphql_query SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        A GraphQL query is executed in the context of a request. An error does not always result in a 5xx error. But could contain errors in the response. Multiple queries could be batched inside a single request.

        This SLI counts all operations, a succeeded operation does not contain errors in it's response or return a 500 error.

        The number of GraphQL queries meeting their duration target based on the urgency of the endpoint. By default, a query should take no more than 1s. We're working on making the urgency customizable in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/5841).

        We're only taking known operations into account. Known operations are queries defined in our codebase and originating from our frontend.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1872300215"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_graphql_query_total{endpoint_id!="graphql:unknown",environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="graphql_query",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGroupManagementErrorSLOViolation
    for: 2m
    annotations:
      title: The group_management SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1120578811"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_error_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_1h{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_5m{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="group_management",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGroupManagementErrorSLOViolation
    for: 2m
    annotations:
      title: The group_management SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1120578811"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_error_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:confidence:ratio_6h{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:confidence:ratio_30m{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="group_management",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGroupManagementErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The group_management SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1120578811"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_error_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_1h{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_5m{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="group_management",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceGroupManagementErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The group_management SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1120578811"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_error_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      confidence: 98%
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:confidence:ratio_6h{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:confidence:ratio_30m{component="group_management",confidence="98%",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="group_management",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceGroupManagementTrafficCessation
    for: 5m
    annotations:
      title: The group_management SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1850758606"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGroupManagementTrafficAbsent
    for: 30m
    annotations:
      title: The group_management SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1850758606"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="group_management",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceGroupManagementTrafficCessationRegional
    for: 5m
    annotations:
      title: The group_management SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1850758606"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceGroupManagementTrafficAbsentRegional
    for: 30m
    annotations:
      title: The group_management SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        Measures calls to the Groups API resource as the number of unsuccessful calls vs the number of total calls.

        An alert on this SLI may indicate that users are unable to modify or create groups via the API.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1850758606"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_total{endpoint_id=~"POST /api/:version/groups|PUT /api/:version/groups/:id",environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: groups_and_projects
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="group_management",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="group_management",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceLoadbalancerErrorSLOViolation
    for: 2m
    annotations:
      title: The loadbalancer SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3255520955"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:ratio_1h{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_5m{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="loadbalancer",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceLoadbalancerErrorSLOViolation
    for: 2m
    annotations:
      title: The loadbalancer SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3255520955"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:ratio_6h{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_30m{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="loadbalancer",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceLoadbalancerErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The loadbalancer SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3255520955"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_1h{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_5m{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="loadbalancer",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceLoadbalancerErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The loadbalancer SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3255520955"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_6h{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_30m{component="loadbalancer",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="loadbalancer",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceLoadbalancerTrafficCessation
    for: 5m
    annotations:
      title: The loadbalancer SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "138982496"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceLoadbalancerTrafficAbsent
    for: 30m
    annotations:
      title: The loadbalancer SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "138982496"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceLoadbalancerTrafficCessationRegional
    for: 5m
    annotations:
      title: The loadbalancer SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "138982496"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceLoadbalancerTrafficAbsentRegional
    for: 30m
    annotations:
      title: The loadbalancer SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        Measures aggregated HTTP request traffic through the HAProxy. 5xx responses are considered to be failures.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "138982496"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="loadbalancer",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceNginxIngressErrorSLOViolation
    for: 2m
    annotations:
      title: The nginx_ingress SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        nginx for api

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1425819584"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",status=~"^5.*",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:ratio_1h{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_5m{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="nginx_ingress",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceNginxIngressErrorSLOViolation
    for: 2m
    annotations:
      title: The nginx_ingress SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        nginx for api

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1425819584"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",status=~"^5.*",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:ratio_6h{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_30m{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="nginx_ingress",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceNginxIngressErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The nginx_ingress SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        nginx for api

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1425819584"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",status=~"^5.*",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_1h{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_5m{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="nginx_ingress",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceNginxIngressErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The nginx_ingress SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        nginx for api

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1425819584"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",status=~"^5.*",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_6h{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_30m{component="nginx_ingress",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="nginx_ingress",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceNginxIngressTrafficCessation
    for: 5m
    annotations:
      title: The nginx_ingress SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        nginx for api

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2358192786"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceNginxIngressTrafficAbsent
    for: 30m
    annotations:
      title: The nginx_ingress SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        nginx for api

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2358192786"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceNginxIngressTrafficCessationRegional
    for: 5m
    annotations:
      title: The nginx_ingress SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        nginx for api

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2358192786"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceNginxIngressTrafficAbsentRegional
    for: 30m
    annotations:
      title: The nginx_ingress SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        nginx for api

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2358192786"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(nginx_ingress_controller_requests:labeled{environment="{{ $labels.environment }}",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="nginx_ingress",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceRailsRequestApdexSLOViolation
    for: 2m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "495984175"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_1h{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.010000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_5m{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.010000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceRailsRequestApdexSLOViolation
    for: 2m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "495984175"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_6h{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.010000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_30m{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.010000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceRailsRequestApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "495984175"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_1h{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.010000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_5m{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.010000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceRailsRequestApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has an apdex violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "495984175"
      grafana_variables: environment,stage
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_6h{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.010000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_30m{component="rails_request",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.010000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceRailsRequestErrorSLOViolation
    for: 2m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "387946920"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:ratio_1h{component="rails_request",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_5m{component="rails_request",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceRailsRequestErrorSLOViolation
    for: 2m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "387946920"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:ratio_6h{component="rails_request",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_30m{component="rails_request",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceRailsRequestErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "387946920"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_1h{component="rails_request",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_5m{component="rails_request",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceRailsRequestErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has an error rate violating SLO
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "387946920"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_error_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_6h{component="rails_request",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_30m{component="rails_request",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="rails_request",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceRailsRequestTrafficCessation
    for: 5m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "538903447"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceRailsRequestTrafficAbsent
    for: 30m
    annotations:
      title: The rails_request SLI of the api service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "538903447"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_sli_rails_request_total{environment="{{ $labels.environment }}",job="gitlab-rails",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceRailsRequestTrafficCessationRegional
    for: 5m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has not received any traffic in the past 30m
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "538903447"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceRailsRequestTrafficAbsentRegional
    for: 30m
    annotations:
      title: The rails_request SLI of the api service in region `{{ $labels.region
        }}` has not reported any traffic in the past 30m
      description: |
        The number of requests meeting their duration target based on the urgency of the endpoint. By default, a request should take no more than 1s. But this can be adjusted by endpoint.

        Read more about this in the [documentation](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html).

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "538903447"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_sli_rails_request_total{environment="{{ $labels.environment }}",job="gitlab-rails",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: in_source_metrics
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="rails_request",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceWorkhorseApdexSLOViolation
    for: 2m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        an apdex violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2586818196"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,le) (
            rate(gitlab_workhorse_http_request_duration_seconds_bucket{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",route!="\\A/api/v4/jobs/request\\z",route!="^/api/v4/jobs/request\\z",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
          )
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_1h{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_5m{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceWorkhorseApdexSLOViolation
    for: 2m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        an apdex violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2586818196"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,le) (
            rate(gitlab_workhorse_http_request_duration_seconds_bucket{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",route!="\\A/api/v4/jobs/request\\z",route!="^/api/v4/jobs/request\\z",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
          )
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_6h{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_30m{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceWorkhorseApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has an apdex violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2586818196"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,region,le) (
            rate(gitlab_workhorse_http_request_duration_seconds_bucket{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",route!="\\A/api/v4/jobs/request\\z",route!="^/api/v4/jobs/request\\z",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
          )
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_1h{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_5m{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceWorkhorseApdexSLOViolationRegional
    for: 2m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has an apdex violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2586818196"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,region,le) (
            rate(gitlab_workhorse_http_request_duration_seconds_bucket{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",route!="\\A/api/v4/jobs/request\\z",route!="^/api/v4/jobs/request\\z",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
          )
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_apdex:ratio_6h{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_apdex:ratio_30m{component="workhorse",env="gprd",monitor="global",type="api"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceWorkhorseErrorSLOViolation
    for: 2m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        an error rate violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2047984749"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_workhorse_http_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:ratio_1h{component="workhorse",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_5m{component="workhorse",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceWorkhorseErrorSLOViolation
    for: 2m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        an error rate violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2047984749"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_workhorse_http_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:ratio_6h{component="workhorse",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_30m{component="workhorse",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceWorkhorseErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has an error rate violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2047984749"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_workhorse_http_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 1h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_1h{component="workhorse",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_5m{component="workhorse",env="gprd",monitor="global",type="api"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_1h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 1
      )
  - alert: ApiServiceWorkhorseErrorSLOViolationRegional
    for: 2m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has an error rate violating SLO
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        Note that this alert is specific to the `{{ $labels.region }}` region.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2047984749"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_workhorse_http_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",route!="^/-/health$",route!="^/-/(readiness|liveness)$",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: error
      slo_alert: "yes"
      user_impacting: "yes"
      window: 6h
    expr: |
      (
        (
          gitlab_regional_sli_errors:ratio_6h{component="workhorse",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,region,component)
        (
          gitlab_regional_sli_errors:ratio_30m{component="workhorse",env="gprd",monitor="global",type="api"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,region,component)
      (
        sum by(env,environment,tier,type,stage,region,component) (gitlab_regional_sli_ops:rate_6h{component="workhorse",env="gprd",monitor="global",type="api"}) >= 0.16667
      )
  - alert: ApiServiceWorkhorseTrafficCessation
    for: 5m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        not received any traffic in the past 30m
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "831392945"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_workhorse_http_requests_total{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_30m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_component_ops:rate_30m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceWorkhorseTrafficAbsent
    for: 30m
    annotations:
      title: The workhorse SLI of the api service (`{{ $labels.stage }}` stage) has
        not reported any traffic in the past 30m
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "831392945"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(gitlab_workhorse_http_requests_total{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_component_ops:rate_5m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"}
  - alert: ApiServiceWorkhorseTrafficCessationRegional
    for: 5m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has not received any traffic in the past 30m
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "831392945"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_workhorse_http_requests_total{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_30m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} == 0
      and
      gitlab_regional_sli_ops:rate_30m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} offset 1h >= 0.16666666666666666
  - alert: ApiServiceWorkhorseTrafficAbsentRegional
    for: 30m
    annotations:
      title: The workhorse SLI of the api service in region `{{ $labels.region }}`
        has not reported any traffic in the past 30m
      description: |
        Aggregation of most web requests that pass through workhorse, monitored via the HTTP interface. Excludes health, readiness and liveness requests. Some known slow requests, such as HTTP uploads, are excluded from the apdex score.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.

        Note that this alert is specific to the `{{ $labels.region }}` region.
      grafana_dashboard_id: api-main/api-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/api-main/api-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "831392945"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage,region) (
          rate(gitlab_workhorse_http_requests_total{environment="{{ $labels.environment }}",job=~"gitlab-workhorse|gitlab-workhorse-api",region="{{ $labels.region }}",stage="{{ $labels.stage }}",type="api"}[5m])
        )
      runbook: docs/api/README.md#alerts
    labels:
      aggregation: regional_component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: not_owned
      pager: pagerduty
      rules_domain: general
      severity: s2
      sli_type: ops
      slo_alert: "no"
      user_impacting: "yes"
    expr: |
      gitlab_regional_sli_ops:rate_5m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"} offset 1h
      unless
      gitlab_regional_sli_ops:rate_5m{component="workhorse",env="gprd",monitor="global",stage="main",type="api"}
