# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ./mimir-rules-jsonnet/saturation.jsonnet TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN
groups:
- name: GitLab Component Saturation Statistics
  interval: 5m
  rules:
  - record: gitlab_component_saturation:ratio_quantile95_1w
    expr: quantile_over_time(0.95, gitlab_component_saturation:ratio{env="gprd",type="ci-runners"}[1w])
  - record: gitlab_component_saturation:ratio_quantile99_1w
    expr: quantile_over_time(0.99, gitlab_component_saturation:ratio{env="gprd",type="ci-runners"}[1w])
  - record: gitlab_component_saturation:ratio_quantile95_1h
    expr: quantile_over_time(0.95, gitlab_component_saturation:ratio{env="gprd",type="ci-runners"}[1h])
  - record: gitlab_component_saturation:ratio_quantile99_1h
    expr: quantile_over_time(0.99, gitlab_component_saturation:ratio{env="gprd",type="ci-runners"}[1h])
  - record: gitlab_component_saturation:ratio_avg_1h
    expr: avg_over_time(gitlab_component_saturation:ratio{env="gprd",type="ci-runners"}[1h])
- name: GitLab Saturation Alerts
  interval: 1m
  rules:
  - alert: component_saturation_slo_out_of_bounds:cpu
    for: 5m
    annotations:
      title: The Average Service CPU Utilization resource of the {{ $labels.type }}
        service ({{ $labels.stage }} stage) has a saturation exceeding SLO and is
        close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Average Service CPU Utilization resource:

        This resource measures average CPU utilization across an all cores in a service fleet. If it is becoming saturated, it may indicate that the fleet needs horizontal or vertical scaling.
      grafana_dashboard_id: alerts-sat_cpu
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_cpu?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1465724101"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - avg by (environment,shard,stage,tier,type) (
                rate(node_cpu_seconds_total{mode="idle", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[5m])
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - avg by (environment,shard,stage,tier,type) (
                rate(node_cpu_seconds_total{mode="idle", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[5m])
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s3
    expr: |
      gitlab_component_saturation:ratio{component="cpu",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="cpu"}
  - alert: component_saturation_slo_out_of_bounds:disk_inodes
    for: 15m
    annotations:
      title: The Disk inode Utilization per Device per Node resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Disk inode Utilization per Device per Node resource:

        Disk inode utilization per device per node.

        If this is too high, its possible that a directory is filling up with files. Consider logging in an checking temp directories for large numbers of files
      grafana_dashboard_id: alerts-sat_disk_inodes
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_disk_inodes?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "39965907"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - (
                node_filesystem_files_free{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                node_filesystem_files{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - (
                node_filesystem_files_free{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                node_filesystem_files{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      pager: pagerduty
      rules_domain: general
      severity: s2
    expr: |
      gitlab_component_saturation:ratio{component="disk_inodes",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="disk_inodes"}
  - alert: ComponentResourceRunningOut_disk_inodes
    for: 15m
    annotations:
      title: The Disk inode Utilization per Device per Node resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) is on track to hit capacity within
        6h
      description: |
        This means that this resource is growing rapidly and is predicted to exceed saturation threshold within 6h.

        Details of the Disk inode Utilization per Device per Node resource:

        Disk inode utilization per device per node.

        If this is too high, its possible that a directory is filling up with files. Consider logging in an checking temp directories for large numbers of files
      grafana_dashboard_id: alerts-sat_disk_inodes
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_disk_inodes?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "39965907"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - (
                node_filesystem_files_free{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                node_filesystem_files{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              1 - (
                node_filesystem_files_free{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                node_filesystem_files{fstype=~"(ext.|xfs)", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      linear_prediction_saturation_alert: 6h
      pager: pagerduty
      rules_domain: general
      severity: s2
    expr: |
      predict_linear(gitlab_component_saturation:ratio{component="disk_inodes",env="gprd",type="ci-runners"}[6h], 21600)
      > on (component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="disk_inodes"}
  - alert: component_saturation_slo_out_of_bounds:disk_maximum_capacity
    for: 5m
    annotations:
      title: The Maximum per-disk capacity resource of the {{ $labels.type }} service
        ({{ $labels.stage }} stage) has a saturation exceeding SLO and is close to
        its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Maximum per-disk capacity resource:

        The maximum capacity for a single disk can be limited by the cloud provider. This tracks the saturation as a ratio of the storage utilization to the maximum size limit enforced per disk.

        In order to resolve a saturation alert, storage needed on a single disk needs to be reduced. Possible ways of doing this include reducing utilization overall or partitioning data across multiple disks.

        (64*2^40) = 64TiB is the maximum value for many types of GCP disks, see https://cloud.google.com/compute/docs/disks#introduction.
      grafana_dashboard_id: alerts-sat_gcp_maximum_disk_capacity
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_gcp_maximum_disk_capacity?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1042809451"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              max by (device,environment,fqdn,shard,stage,tier,type) (
                node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ) / (64*2^40)
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              max by (device,environment,fqdn,shard,stage,tier,type) (
                node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ) / (64*2^40)
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      pager: pagerduty
      rules_domain: general
      severity: s1
    expr: |
      gitlab_component_saturation:ratio{component="disk_maximum_capacity",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="disk_maximum_capacity"}
  - alert: component_saturation_slo_out_of_bounds:disk_space
    for: 15m
    annotations:
      title: The Disk Space Utilization per Device per Node resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Disk Space Utilization per Device per Node resource:

        Disk space utilization per device per node.
      grafana_dashboard_id: alerts-sat_disk_space
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_disk_space?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2661375984"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                1 - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} / node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                1 - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} / node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      pager: pagerduty
      rules_domain: general
      severity: s2
    expr: |
      gitlab_component_saturation:ratio{component="disk_space",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="disk_space"}
  - alert: ComponentResourceRunningOut_disk_space
    for: 15m
    annotations:
      title: The Disk Space Utilization per Device per Node resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) is on track to hit capacity within
        6h
      description: |
        This means that this resource is growing rapidly and is predicted to exceed saturation threshold within 6h.

        Details of the Disk Space Utilization per Device per Node resource:

        Disk space utilization per device per node.
      grafana_dashboard_id: alerts-sat_disk_space
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_disk_space?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2661375984"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                1 - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} / node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(device,environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                1 - node_filesystem_avail_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} / node_filesystem_size_bytes{fstype=~"ext.|xfs", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      linear_prediction_saturation_alert: 6h
      pager: pagerduty
      rules_domain: general
      severity: s2
    expr: |
      predict_linear(gitlab_component_saturation:ratio{component="disk_space",env="gprd",type="ci-runners"}[6h], 21600)
      > on (component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="disk_space"}
  - alert: component_saturation_slo_out_of_bounds:memory
    for: 5m
    annotations:
      title: The Memory Utilization per Node resource of the {{ $labels.type }} service
        ({{ $labels.stage }} stage) has a saturation exceeding SLO and is close to
        its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Memory Utilization per Node resource:

        Memory utilization per device per node.
      grafana_dashboard_id: alerts-sat_memory
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_memory?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1955556769"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              instance:node_memory_utilization:ratio{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} or instance:node_memory_utilisation:ratio{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              instance:node_memory_utilization:ratio{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"} or instance:node_memory_utilisation:ratio{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="memory",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="memory"}
  - alert: component_saturation_slo_out_of_bounds:nf_conntrack_entries
    for: 5m
    annotations:
      title: The conntrack Entries per Node resource of the {{ $labels.type }} service
        ({{ $labels.stage }} stage) has a saturation exceeding SLO and is close to
        its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the conntrack Entries per Node resource:

        Netfilter connection tracking table utilization per node.

        When saturated, new connection attempts (incoming SYN packets) are dropped with no reply, leaving clients to slowly retry (and typically fail again) over the next several seconds.  When packets are being dropped due to this condition, kernel will log the event as: "nf_conntrack: table full, dropping packet".
      grafana_dashboard_id: alerts-sat_conntrack
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_conntrack?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "503581002"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,fqdn,instance,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              max_over_time(node_nf_conntrack_entries{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[1m])
              /
              node_nf_conntrack_entries_limit{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,fqdn,instance,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              max_over_time(node_nf_conntrack_entries{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[1m])
              /
              node_nf_conntrack_entries_limit{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s3
    expr: |
      gitlab_component_saturation:ratio{component="nf_conntrack_entries",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="nf_conntrack_entries"}
  - alert: component_saturation_slo_out_of_bounds:node_schedstat_waiting
    for: 90m
    annotations:
      title: The Node Scheduler Waiting Time resource of the {{ $labels.type }} service
        ({{ $labels.stage }} stage) has a saturation exceeding SLO and is close to
        its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Node Scheduler Waiting Time resource:

        Measures the amount of scheduler waiting time that processes are waiting to be scheduled, according to [`CPU Scheduling Metrics`](https://www.robustperception.io/cpu-scheduling-metrics-from-the-node-exporter).

        A high value indicates that a node has more processes to be run than CPU time available to handle them, and may lead to degraded responsiveness and performance from the application.

        Additionally, it may indicate that the fleet is under-provisioned.
      grafana_dashboard_id: alerts-sat_node_schedstat_waiting
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_node_schedstat_waiting?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1415313189"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              avg without (cpu) (rate(node_schedstat_waiting_seconds_total{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[1h]))
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              avg without (cpu) (rate(node_schedstat_waiting_seconds_total{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[1h]))
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="node_schedstat_waiting",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="node_schedstat_waiting"}
  - alert: component_saturation_slo_out_of_bounds:open_fds
    for: 5m
    annotations:
      title: The Open file descriptor utilization per instance resource of the {{
        $labels.type }} service ({{ $labels.stage }} stage) has a saturation exceeding
        SLO and is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Open file descriptor utilization per instance resource:

        Open file descriptor utilization per instance.

        Saturation on file descriptor limits may indicate a resource-descriptor leak in the application.

        As a temporary fix, you may want to consider restarting the affected process.
      grafana_dashboard_id: alerts-sat_open_fds
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_open_fds?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1001792825"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,job,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                process_open_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                process_max_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              or
              (
                ruby_file_descriptors{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                ruby_process_max_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,job,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              (
                process_open_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                process_max_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              or
              (
                ruby_file_descriptors{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
                /
                ruby_process_max_fds{environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}
              )
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      pager: pagerduty
      rules_domain: general
      severity: s2
    expr: |
      gitlab_component_saturation:ratio{component="open_fds",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="open_fds"}
  - alert: component_saturation_slo_out_of_bounds:private_runners
    for: 5m
    annotations:
      title: The private Runner utilization resource of the {{ $labels.type }} service
        ({{ $labels.stage }} stage) has a saturation exceeding SLO and is close to
        its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the private Runner utilization resource:

        private runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_private_runners
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_private_runners?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "204635596"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="private"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="private"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="private"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="private"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="private_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="private_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_linux_large_amd64_runners
    for: 5m
    annotations:
      title: The saas-linux-large-amd64 Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-linux-large-amd64 Runner utilization resource:

        saas-linux-large-amd64 runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_l_l_amd64
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_l_l_amd64?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3579321365"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-large-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-large-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-large-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-large-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_linux_large_amd64_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_linux_large_amd64_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_linux_medium_amd64_gpu_standard_runners
    for: 5m
    annotations:
      title: The saas-linux-medium-amd64-gpu-standard Runner utilization resource
        of the {{ $labels.type }} service ({{ $labels.stage }} stage) has a saturation
        exceeding SLO and is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-linux-medium-amd64-gpu-standard Runner utilization resource:

        saas-linux-medium-amd64-gpu-standard runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_l_m_amd64_g_s
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_l_m_amd64_g_s?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "398921284"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64-gpu-standard"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64-gpu-standard"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64-gpu-standard"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64-gpu-standard"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_linux_medium_amd64_gpu_standard_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_linux_medium_amd64_gpu_standard_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_linux_medium_amd64_runners
    for: 5m
    annotations:
      title: The saas-linux-medium-amd64 Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-linux-medium-amd64 Runner utilization resource:

        saas-linux-medium-amd64 runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_l_m_amd64
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_l_m_amd64?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1447099375"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-medium-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_linux_medium_amd64_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_linux_medium_amd64_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_linux_small_amd64_runners
    for: 5m
    annotations:
      title: The saas-linux-small-amd64 Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-linux-small-amd64 Runner utilization resource:

        saas-linux-small-amd64 runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_l_s_amd64
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_l_s_amd64?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1323503221"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-small-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-small-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-small-amd64"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-linux-small-amd64"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_linux_small_amd64_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_linux_small_amd64_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_macos_medium_m1_runners
    for: 5m
    annotations:
      title: The saas-macos-medium-m1 Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-macos-medium-m1 Runner utilization resource:

        saas-macos-medium-m1 runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_m_m_m1
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_m_m_m1?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "736478168"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-medium-m1"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-medium-m1"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-medium-m1"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-medium-m1"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_macos_medium_m1_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_macos_medium_m1_runners"}
  - alert: component_saturation_slo_out_of_bounds:saas_macos_staging_runners
    for: 5m
    annotations:
      title: The saas-macos-staging Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the saas-macos-staging Runner utilization resource:

        saas-macos-staging runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_r_saas_m_s
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_r_saas_m_s?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2529444096"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-staging"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-staging"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-staging"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="saas-macos-staging"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="saas_macos_staging_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="saas_macos_staging_runners"}
  - alert: component_saturation_slo_out_of_bounds:shared_runners_gitlab
    for: 5m
    annotations:
      title: The shared-gitlab-org Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the shared-gitlab-org Runner utilization resource:

        shared-gitlab-org runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_shared_runners_gitlab
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_shared_runners_gitlab?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3295582630"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="shared-gitlab-org"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="shared-gitlab-org"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="shared-gitlab-org"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="shared-gitlab-org"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="shared_runners_gitlab",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="shared_runners_gitlab"}
  - alert: component_saturation_slo_out_of_bounds:single_node_cpu
    for: 10m
    annotations:
      title: The Average CPU Utilization per Node resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the Average CPU Utilization per Node resource:

        Average CPU utilization per Node.

        If average CPU is saturated, it may indicate that a fleet is in need to horizontal or vertical scaling. It may also indicate imbalances in load in a fleet.
      grafana_dashboard_id: alerts-sat_single_node_cpu
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_single_node_cpu?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "3372411356"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              avg without(cpu, mode) (1 - rate(node_cpu_seconds_total{mode="idle", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[5m]))
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,fqdn,shard,stage,tier,type) (
          clamp_min(
            clamp_max(
              avg without(cpu, mode) (1 - rate(node_cpu_seconds_total{mode="idle", environment="{{ $labels.environment }}",stage="{{ $labels.stage }}",type="{{ $labels.type }}"}[5m]))
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="single_node_cpu",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="single_node_cpu"}
  - alert: component_saturation_slo_out_of_bounds:windows_shared_runners
    for: 5m
    annotations:
      title: The windows-shared Runner utilization resource of the {{ $labels.type
        }} service ({{ $labels.stage }} stage) has a saturation exceeding SLO and
        is close to its capacity limit.
      description: |
        This means that this resource is running close to capacity and is at risk of exceeding its current capacity limit.

        Details of the windows-shared Runner utilization resource:

        windows-shared runner utilization per instance.

        Each runner manager has a maximum number of runners that it can coordinate at any single moment.

        When this metric is saturated, new CI jobs will queue. When this occurs we should consider adding more runner managers, or scaling the runner managers vertically and increasing their maximum runner capacity.
      grafana_dashboard_id: alerts-sat_windows_shared_runners
      grafana_dashboard_link: https://dashboards.gitlab.net/d/alerts-sat_windows_shared_runners?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-type={{ $labels.type }}&var-stage={{ $labels.stage
        }}
      grafana_datasource_id: mimir-gitlab-gprd
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4225856541"
      grafana_variables: environment,type,stage
      promql_query: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="windows-shared"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="windows-shared"} > 0
              ,
              1)
          ,
          0)
        )
      promql_template_1: |
        max by(environment,instance,shard) (
          clamp_min(
            clamp_max(
              sum without(executor_stage, exported_stage, state) (
                max_over_time(gitlab_runner_jobs{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="windows-shared"}[1m])
              )
              /
              gitlab_runner_limit{job=~"runners-manager|scrapeConfig/monitoring/prometheus-agent-runner",shard="windows-shared"} > 0
              ,
              1)
          ,
          0)
        )
      runbook: docs/{{ $labels.type }}/README.md
    labels:
      alert_type: cause
      rules_domain: general
      severity: s4
    expr: |
      gitlab_component_saturation:ratio{component="windows_shared_runners",env="gprd",type="ci-runners"} > on(component) group_left
      slo:max:hard:gitlab_component_saturation:ratio{component="windows_shared_runners"}
