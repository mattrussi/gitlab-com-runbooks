# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ./mimir-rules-jsonnet/saturation.jsonnet TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN
groups:
- name: Saturation Rules (autogenerated)
  interval: 1m
  rules:
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_cpu
    expr: |
      quantile by(env,environment,shard,stage,tier,type) (
        0.99,
        clamp_min(
          clamp_max(
            (
              sum by (container,env,environment,pod,shard,stage,tier,type) (
                rate(container_cpu_usage_seconds_total:labeled{container!="", container!="POD", env="gprd",type="kube"}[1h])
              )
              unless on(container,env,environment,pod,shard,stage,tier,type) (
                last_over_time(container_spec_cpu_quota:labeled{container!="", container!="POD", env="gprd",type="kube"}[1h])
              )
            )
            /
            sum by(container,env,environment,pod,shard,stage,tier,type) (
              kube_pod_container_resource_requests:labeled{container!="", container!="POD", resource="cpu", env="gprd",type="kube"}
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_cpu_limit
    expr: |
      max by(env,environment,shard,stage,tier,type) (
        clamp_min(
          clamp_max(
            sum by (container,env,environment,pod,shard,stage,tier,type) (
              rate(container_cpu_usage_seconds_total:labeled{container!="", container!="POD", env="gprd",type="kube"}[5m])
            )
            /
            sum by(container,env,environment,pod,shard,stage,tier,type) (
              container_spec_cpu_quota:labeled{container!="", container!="POD", env="gprd",type="kube"}
              /
              container_spec_cpu_period:labeled{container!="", container!="POD", env="gprd",type="kube"}
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_memory
    expr: |
      max by(deployment,env,environment,shard,stage,tier,type) (
        clamp_min(
          clamp_max(
            container_memory_working_set_bytes:labeled{container!="", container!="POD", env="gprd",type="kube"}
            /
            (container_spec_memory_limit_bytes:labeled{container!="", container!="POD", env="gprd",type="kube"} > 0)
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_container_throttling
    expr: |
      quantile by(env,environment,shard,stage,tier,type) (
        0.99,
        clamp_min(
          clamp_max(
            avg by (container,env,environment,pod,shard,stage,tier,type)(
              rate(container_cpu_cfs_throttled_periods_total:labeled{container!="", env="gprd",type="kube"}[5m])
              /
              rate(container_cpu_cfs_periods_total:labeled{container!="", env="gprd",type="kube"}[5m])
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_horizontalpodautoscaler_desired_replicas
    expr: |
      max by(env,environment,shard,stage,tier,type) (
        clamp_min(
          clamp_max(
            kube_horizontalpodautoscaler_status_desired_replicas:labeled{env="gprd",type="kube", shard!~"database-throttled|elasticsearch|gitaly-throttled|urgent-authorized-projects", namespace!~"pubsubbeat"}
            /
            kube_horizontalpodautoscaler_spec_max_replicas:labeled{env="gprd",type="kube", shard!~"database-throttled|elasticsearch|gitaly-throttled|urgent-authorized-projects", namespace!~"pubsubbeat"}
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_node_ips
      stage: main
      tier: inf
      type: kube
    expr: |
      max by(env,environment,shard) (
        clamp_min(
          clamp_max(
            sum(:kube_pod_info_node_count:{env="gprd",type="kube"}) by (cluster,env,environment,shard)
            /
            sum(
              gitlab:gcp_subnet_max_ips{env="gprd",type="kube"} * on (subnet) group_right gitlab:cluster:subnet:mapping{env="gprd",type="kube"}
            ) by (cluster,env,environment,shard)
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_persistent_volume_claim_disk_space
      stage: main
      tier: inf
      type: kube
    expr: |
      max by(env,environment,shard) (
        clamp_min(
          clamp_max(
            kubelet_volume_stats_used_bytes
            /
            kubelet_volume_stats_capacity_bytes
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_persistent_volume_claim_inodes
      stage: main
      tier: inf
      type: kube
    expr: |
      max by(env,environment,shard) (
        clamp_min(
          clamp_max(
            kubelet_volume_stats_inodes_used
            /
            kubelet_volume_stats_inodes
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_pool_cpu
    expr: |
      max by(env,environment,shard,stage,tier,type) (
        clamp_min(
          clamp_max(
            1 - avg by (env,environment,shard,stage,tier,type) (
              rate(node_cpu_seconds_total:labeled{mode="idle", env="gprd",type="kube"}[5m])
            )
            ,
            1)
        ,
        0)
      )
  - record: gitlab_component_saturation:ratio
    labels:
      component: kube_pool_max_nodes
    expr: |
      max by(env,environment,shard,stage,tier,type) (
        clamp_min(
          clamp_max(
            count by (cluster, env, environment, label_pool, tier, type, stage, shard) (
              kube_node_labels:labeled{env="gprd",type="kube"}
            )
            / on(cluster, env, environment, label_pool) group_left() (
              label_replace(
                terraform_report_google_cluster_node_pool_max_node_count,
                "label_pool", "$0", "pool_name", ".*"
              )
              * on(cluster, env, environment) group_left()
              count by (cluster, env, environment) (
                group by (cluster, env, environment, label_topology_kubernetes_io_zone) (
                  kube_node_labels:labeled{env="gprd",type="kube"}
                )
              )
            )
            ,
            1)
        ,
        0)
      )
