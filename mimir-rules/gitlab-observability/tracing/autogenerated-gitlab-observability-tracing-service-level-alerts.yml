# WARNING. DO NOT EDIT THIS FILE BY HAND. USE ./mimir-rules-jsonnet/service-component-alerts.jsonnet TO GENERATE IT
# YOUR CHANGES WILL BE OVERRIDDEN
groups:
- name: 'Service Component Alerts: tracing'
  interval: 1m
  rules:
  - alert: TracingServiceIngressApdexSLOViolation
    for: 2m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4160214294"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,le) (
            rate(traefik_service_request_duration_seconds_bucket{code!~"4xx|5xx",environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
          )
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "no"
      window: 1h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_1h{component="ingress",monitor="global",type="tracing"}
          < (1 - 14.4 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_5m{component="ingress",monitor="global",type="tracing"}
          < (1 - 14.4 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="ingress",monitor="global",type="tracing"}) >= 1
      )
  - alert: TracingServiceIngressApdexSLOViolation
    for: 2m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has an apdex violating SLO
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        Currently the apdex value is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "4160214294"
      grafana_variables: environment,stage
      promql_template_1: |
        histogram_quantile(
          0.950000,
          sum by (env,environment,tier,stage,le) (
            rate(traefik_service_request_duration_seconds_bucket{code!~"4xx|5xx",environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
          )
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: apdex
      slo_alert: "yes"
      user_impacting: "no"
      window: 6h
    expr: |
      (
        (
          gitlab_component_apdex:ratio_6h{component="ingress",monitor="global",type="tracing"}
          < (1 - 6 * 0.005000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_apdex:ratio_30m{component="ingress",monitor="global",type="tracing"}
          < (1 - 6 * 0.005000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="ingress",monitor="global",type="tracing"}) >= 0.16667
      )
  - alert: TracingServiceIngressErrorSLOViolation
    for: 2m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1225540327"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(traefik_service_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "no"
      window: 1h
    expr: |
      (
        (
          gitlab_component_errors:ratio_1h{component="ingress",monitor="global",type="tracing"}
          > (14.4 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_5m{component="ingress",monitor="global",type="tracing"}
          > (14.4 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_1h{component="ingress",monitor="global",type="tracing"}) >= 1
      )
  - alert: TracingServiceIngressErrorSLOViolation
    for: 2m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has an error rate violating SLO
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        Currently the error-rate is {{ $value | humanizePercentage }}.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "1225540327"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(traefik_service_requests_total{code=~"^5.*",environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: slo_violation
      alert_type: symptom
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: error
      slo_alert: "yes"
      user_impacting: "no"
      window: 6h
    expr: |
      (
        (
          gitlab_component_errors:ratio_6h{component="ingress",monitor="global",type="tracing"}
          > (6 * 0.001000)
        )
        and on (env,environment,tier,type,stage,component)
        (
          gitlab_component_errors:ratio_30m{component="ingress",monitor="global",type="tracing"}
          > (6 * 0.001000)
        )
      )
      and on(env,environment,tier,type,stage,component)
      (
        sum by(env,environment,tier,type,stage,component) (gitlab_component_ops:rate_6h{component="ingress",monitor="global",type="tracing"}) >= 0.16667
      )
  - alert: TracingServiceIngressTrafficCessation
    for: 5m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has not received any traffic in the past 30m
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        This alert signifies that the SLI is reporting a cessation of traffic; the signal is present, but is zero.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2810685938"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(traefik_service_requests_total{environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "no"
    expr: |
      gitlab_component_ops:rate_30m{component="ingress",monitor="global",stage="main",type="tracing"} == 0
      and
      gitlab_component_ops:rate_30m{component="ingress",monitor="global",stage="main",type="tracing"} offset 1h >= 0.16666666666666666
  - alert: TracingServiceIngressTrafficAbsent
    for: 30m
    annotations:
      title: The ingress SLI of the tracing service (`{{ $labels.stage }}` stage)
        has not reported any traffic in the past 30m
      description: |
        With distributed tracing, you can troubleshoot application performance issues by inspecting how a request moves through different services and systems, the timing of each operation, and any errors or logs as they occur. Tracing is particularly useful in the context of microservice applications, which group multiple independent services collaborating to fulfil user requests.

        This alert signifies that the SLI was previously reporting traffic, but is no longer - the signal is absent.

        This could be caused by a change to the metrics used in the SLI, or by the service not receiving traffic.
      grafana_dashboard_id: tracing-main/tracing-overview
      grafana_dashboard_link: https://dashboards.gitlab.net/d/tracing-main/tracing-overview?from=now-6h/m&to=now-1m/m&var-environment={{
        $labels.environment }}&var-stage={{ $labels.stage }}
      grafana_datasource_id: mimir-gitlab-observability
      grafana_min_zoom_hours: "6"
      grafana_panel_id: "2810685938"
      grafana_variables: environment,stage
      promql_template_1: |
        sum by (env,environment,tier,stage) (
          rate(traefik_service_requests_total{environment="{{ $labels.environment }}",job="default/traefik",service=~"tenant.*otel-collector-traces.*",stage="{{ $labels.stage }}",team="platform_insights"}[5m])
        )
      runbook: docs/tracing/README.md#alerts
    labels:
      aggregation: component
      alert_class: traffic_cessation
      alert_type: cause
      feature_category: observability
      rules_domain: general
      severity: s3
      sli_type: ops
      slo_alert: "no"
      user_impacting: "no"
    expr: |
      gitlab_component_ops:rate_5m{component="ingress",monitor="global",stage="main",type="tracing"} offset 1h
      unless
      gitlab_component_ops:rate_5m{component="ingress",monitor="global",stage="main",type="tracing"}
