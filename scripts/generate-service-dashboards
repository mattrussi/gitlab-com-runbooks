#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'yaml'
require_relative '../lib/monitored_services'

def generate(service)
  file = "dashboards/#{service}/main.dashboard.jsonnet"
  puts "Generating missing #{file}"

  content = if service.start_with?("runway-redis")
              generate_runway_redis(service)
            elsif service.start_with?("redis")
              generate_redis(service)
            else
              generate_common_service(service)
            end

  dirname = File.dirname(file)
  FileUtils.mkdir_p(dirname) unless File.directory?(dirname)
  File.write(file, content)
end

def generate_common_service(service)
  <<~JSONNET
    // This file is autogenerated using scripts/generate-service-dashboards
    // Please feel free to customize this file.
    local serviceDashboard = import 'gitlab-dashboards/service_dashboard.libsonnet';

    serviceDashboard.overview('#{service}')
    .overviewTrailer()
  JSONNET
end

def generate_redis(service)
  <<~JSONNET
    // This file is autogenerated using scripts/generate-service-dashboards
    // Please feel free to customize this file.
    local redisCommon = import 'gitlab-dashboards/redis_common_graphs.libsonnet';

    redisCommon.redisDashboard('#{service}', cluster=false, hitRatio=false)
    .overviewTrailer()
  JSONNET
end

def generate_runway_redis(service)
  <<~JSONNET
    // This file is autogenerated using scripts/generate-service-dashboards
    // Please feel free to customize this file.
    local runwayRedisCommon = import 'gitlab-dashboards/runway_redis_common_graphs.libsonnet';

    runwayRedisCommon.runwayRedisDashboard('#{service}')
    .overviewTrailer()
  JSONNET
end

begin
  service_names = MonitoredServices.get_service_names
  service_names.map { |name| generate(name) unless MonitoredServices.has_dashboard?(name) }
rescue StandardError => e
  warn [e.message, *e.backtrace].join("\n")
  exit 1
end
